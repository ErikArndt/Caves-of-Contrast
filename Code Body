/**Created by Hoodie Sticks and Jaime McAllen
 * 
 * Thanks to Khan Academy users:
 * google
 * Benjamin Clements
 * Blue Leaf
 * for answering my help requests.
 **/
 
//All the variables
var blackX = 12;
var blackY = 190;
var bJumpAnim;
var whiteX = 12;
var whiteY = 210;
var wJumpAnim;
var eyePosition;
var blackEyelidPos;
var whiteEyelidPos;
var blinkTimer = 0;
var blinkReset = random(90, 120);
var blackSpawnX = 12;
var blackSpawnY = 190;
var whiteSpawnX;
var whiteSpawnY;
var doublePlaceTimer = 0;
var doubleSwitchTimer = 0;
var doubleClickTimer = 0;
var doublePauseTimer = 0;
var spawnAnimTimer = 1;
var goalAnimTimer = 1;
var midairJumpTimer = 0;
var playingAs = 0;
var blackJumpSpeed=0;
var whiteJumpSpeed=0;
var blackOnGround=true;
var whiteOnGround=true;
var walkedOffLedge=false;
var againstWallR;
var againstWallL;
var gravity=0.3;
var jumpPower=5.5 + gravity;
var walkSpeed=2;
var atGoal = false;
var level = 0;
var controlScheme;
var numArrows = 0;
var blockPlaces = 0;
var highScore = [];
var currentTime = 0;
var personalBest = 0;
var fastestTimes = [38,38,40,40,37,39,37,39,66,65,10];
var minBlockPlaces = ["useless", 0, 0, 0, 1, 5, 3, 3, 3, 5, 10, 15, 1, 26, 7, 29, 8, 0, 1, 1, 6, 1, 1, 10, 3, 2, 10, 3, 22, 4];
var screen = "title";
var goalTimer = 0;
var tutorialTimer = 0;
var restartTimer = 0;
var whiteInLevel = false;
var levelSelect = [];
var keys=[];

/** 
 * 0 = Black tile
 * 1 = White tile
 * 2 = Black spawn
 * 3 = White spawn
 * 4 = Goal
 * 5 = Grey tile (solid for both characters)
 * 6 = Checkpoint (Black)
 * 7 = Checkpoint (White)
 * 8 = Void block
 * 9 = Black Arrow Right
 * 10 = Black Arrow Up
 * 11 = Black Arrow Left
 * 12 = Black Arrow Down
 * 13 = White Arrow Right
 * 14 = White Arrow Up
 * 15 = White Arrow Left
 * 16 = White Arrow Down
 **/
var tileLayouts = [
    ["I know arrays within arrays within an array is a bit overkill, but whatever. If it ain't broke, don't fix it."],//Useless slot so that level 1 is in slot 1.
    
    //Level 1
    [
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ],
    
    //Level 2
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0],
        [0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
        [2,1,1,1,1,1,1,1,1,1,1,0,1,1,0,4],
        [0,0,1,0,1,1,1,0,1,1,1,1,1,1,0,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
        [0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ],
    
    //Level 3
    [
        [0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,4],
        [0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0],
        [0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
        [1,1,0,1,1,1,1,1,0,1,1,1,0,0,0,0],
        [1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0],
        [1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0],
        [0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],
        [0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0],
        [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],
        [0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1],
        [0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1],
        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1],
        [1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0],
        [2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0]
    ],
    
    //Level 4
    [
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4],
        [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
        [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
        [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
        [2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ],
    
    //Level 5
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,4,0,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,2,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    ],
    
    //Level 6
    [
        [0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,4],
        [0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0],
        [0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
        [1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0],
        [1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0],
        [1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0],
        [0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],
        [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],
        [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0]
    ],
    
    //Level 7
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0],
        [0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
        [2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
        [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0],
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0],
        [0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0],
        [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
        [0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,4]
    ],
    
    //Level 8
    [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0],
        [0,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0],
        [1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0],
        [1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0],
        [1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,4],
        [1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0],
        [1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0],
        [1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0],
        [1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1],
        [1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1],
        [2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ],
    
    //Level 9
    [
        [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
        [0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1],
        [0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1],
        [0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1],
        [0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0],
        [1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0],
        [1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0],
        [2,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0],
        [3,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0],
        [0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,4],
        [0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0],
        [0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0]
    ],
    
    //Level 10
    [
        [0,1,1,1,0,1,0,0,0,1,0,1,1,1,0,1],
        [0,0,1,0,1,1,1,0,1,0,0,0,1,0,1,1],
        [0,1,0,0,0,1,0,1,1,1,0,1,0,0,0,1],
        [1,1,1,0,1,0,0,0,1,0,1,1,1,0,1,0],
        [0,1,0,1,1,1,0,1,0,0,0,1,0,1,1,1],
        [1,0,0,0,1,0,1,1,1,0,1,0,0,0,1,0],
        [1,1,0,1,0,0,0,1,0,1,1,1,0,1,0,0],
        [2,0,1,1,1,0,1,0,0,0,1,0,1,1,1,0],
        [3,0,0,1,0,1,1,1,0,1,0,0,0,1,0,1],
        [1,0,1,0,0,0,1,0,1,1,1,0,1,0,0,0],
        [0,1,1,1,0,1,0,0,0,1,0,1,1,1,0,1],
        [0,0,1,0,1,1,1,0,1,0,0,0,1,0,1,1],
        [0,1,0,0,0,1,0,1,1,1,0,1,0,0,0,1],
        [1,1,1,0,1,0,0,0,1,0,1,1,1,0,1,0],
        [0,1,0,1,1,1,0,1,0,0,0,1,0,1,1,1],
        [1,0,0,0,1,0,1,1,1,0,1,0,0,0,1,4]
    ],
    
    //Level 11
    [
        [0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,4],
        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [0,1,1,1,1,1,1,6,1,1,1,1,1,1,0,0],
        [0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0],
        [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0],
        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [2,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1],
        [3,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1]
    ],
    
    //Level 12
    [
        [1,1,1,5,5,5,5,5,5,5,5,5,5,5,1,1],
        [1,1,1,1,1,1,5,5,5,5,5,5,5,1,1,1],
        [1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,5,5,5,1,1,1,1,1,1],
        [2,1,1,1,1,1,1,5,5,5,1,1,1,1,1,4],
        [3,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0],
        [0,0,0,0,0,5,5,5,5,0,0,0,0,0,0,0],
        [0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0],
        [0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,0]
    ],
    
    //Level 13
    [
        [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,7],
        [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
        [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
        [1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
        [1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
        [1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,0],
        [1,1,1,1,1,1,1,5,5,0,0,0,0,0,0,0],
        [2,1,1,1,1,1,1,5,5,0,0,0,0,0,0,0],
        [3,0,0,0,0,0,0,5,5,0,0,0,0,5,5,5],
        [0,0,0,0,0,0,0,5,5,0,5,5,5,5,5,5],
        [0,0,0,0,0,0,0,5,5,1,5,1,1,1,1,1],
        [0,0,0,0,0,0,5,5,5,1,1,1,5,5,5,1],
        [0,0,0,0,0,5,5,5,5,5,5,5,5,1,1,1],
        [0,0,0,0,0,5,5,5,1,1,1,1,1,1,5,5],
        [0,0,0,0,5,5,5,1,1,5,5,5,5,5,5,4],
        [0,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1]
    ],
    
    //Level 14
    [
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,0,5,5,5,5,5,5,5,1,5,5,5,5,5],
        [5,5,0,1,0,0,5,5,5,5,1,5,5,5,5,5],
        [5,5,1,1,1,0,1,0,0,0,1,0,0,5,5,5],
        [5,5,1,5,1,5,1,5,5,1,1,1,0,5,5,5],
        [5,2,1,5,1,1,1,6,1,1,5,1,0,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,1,0,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,1,1,5,5,5],
        [5,5,5,5,5,5,5,5,4,0,0,1,0,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
    ],
    
    //Level 15
    [
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,4,5,0,0,1,1,1,0,0,0,0,0,0,0,5],
        [5,0,5,1,1,1,0,1,1,0,0,1,1,1,1,5],
        [5,1,1,1,0,0,0,1,1,1,1,1,0,1,1,5],
        [5,0,5,0,0,0,0,5,5,5,5,5,0,1,0,5],
        [5,0,5,5,5,5,5,0,0,1,1,1,5,6,0,5],
        [5,0,5,1,1,1,1,1,1,1,1,1,0,0,5,5],
        [5,0,5,0,0,1,7,1,0,0,0,1,1,1,1,5],
        [5,0,0,0,5,5,5,5,5,5,0,0,1,1,1,5],
        [5,1,1,5,1,1,5,0,0,0,5,0,0,1,1,5],
        [5,5,5,1,1,1,0,1,1,0,0,5,0,1,1,5],
        [5,5,5,1,1,1,0,5,1,1,0,5,5,1,1,5],
        [5,5,5,5,1,0,5,5,5,1,0,7,5,1,1,5],
        [5,2,1,1,0,0,5,5,5,1,1,6,1,1,1,5],
        [5,3,0,0,5,5,5,5,5,0,0,0,0,0,0,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
    ],
    
    //Level 16
    [
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,4],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0],
        [1,1,1,1,1,1,8,8,8,8,8,8,8,8,5,0],
        [1,1,1,1,1,1,8,8,8,8,8,8,8,8,5,0],
        [1,1,1,1,1,1,8,8,8,8,8,8,8,8,5,0],
        [1,1,1,1,1,1,8,8,8,8,8,8,8,8,5,0],
        [1,1,1,1,1,1,8,8,8,8,8,8,8,8,5,0],
        [1,1,1,1,1,1,8,8,8,8,8,8,8,8,5,0],
        [1,1,1,1,1,1,8,8,8,8,8,8,8,8,1,1],
        [1,1,1,1,1,1,8,8,8,8,8,8,8,8,5,3],
        [1,1,1,1,1,1,8,8,8,8,8,8,8,8,5,5],
        [2,1,1,1,1,1,8,8,8,8,8,8,8,8,5,5]
    ],
    
    //Level 17
    [
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,2,1,1,8,8,0,0,0,0,8,8,1,1,1,1],
        [5,5,5,5,8,8,5,5,5,5,8,8,5,5,5,1],
        [5,5,5,5,8,8,5,5,5,5,8,8,5,5,5,1],
        [5,3,0,0,8,8,1,1,1,1,8,8,0,0,0,0],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
    ],
    
    //Level 18
    [
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,8,8,8,8,1,4,5,5],
        [5,5,5,5,5,5,5,5,8,8,8,8,5,5,5,5],
        [5,5,5,5,5,5,5,1,8,8,8,8,5,5,5,5],
        [5,5,5,2,1,1,1,1,8,8,8,8,5,5,5,5],
        [5,5,5,3,0,0,0,0,8,8,8,8,5,5,5,5],
        [5,5,5,5,5,5,5,0,8,8,8,8,5,5,5,5],
        [5,5,5,5,5,5,5,5,8,8,8,8,5,5,5,5],
        [5,5,5,5,5,5,5,5,8,8,8,8,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
    ],
    
    //Level 19
    [
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5],
        [5,5,5,5,5,8,8,8,8,8,8,8,8,8,5,5],
        [5,5,5,5,5,8,8,8,8,8,8,8,8,8,5,5],
        [5,5,5,5,5,8,8,8,8,8,8,8,8,8,5,5],
        [5,5,5,5,5,8,8,8,8,8,8,8,8,8,5,5],
        [5,5,5,5,1,8,8,8,8,8,8,8,8,8,0,5],
        [5,5,4,5,1,5,5,5,5,5,5,5,5,5,0,5],
        [5,5,1,5,1,8,8,8,8,8,8,8,8,8,0,5],
        [5,5,1,5,5,8,8,8,8,8,8,8,8,8,5,5],
        [5,5,8,1,5,8,8,8,8,8,8,8,8,8,5,5],
        [5,1,1,1,1,8,8,8,8,8,8,8,8,8,5,5],
        [5,2,0,0,0,8,8,8,8,8,8,8,8,8,3,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
    ],
    
    //Level 20
    [
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5],
        [5,3,8,0,8,0,8,0,8,1,8,1,1,8,5,5],
        [5,8,5,8,5,8,5,8,5,8,5,8,5,0,5,5],
        [5,1,8,0,8,1,8,1,8,0,8,1,5,0,5,5],
        [5,8,5,8,5,8,5,8,5,8,5,8,5,0,5,5],
        [5,0,8,0,8,1,8,0,8,0,8,1,5,0,5,5],
        [5,8,5,8,5,8,5,8,5,8,5,8,5,0,5,5],
        [5,0,8,1,8,1,8,1,8,1,8,0,5,0,5,5],
        [5,8,5,8,5,8,5,8,5,8,5,8,5,0,5,5],
        [5,0,8,0,8,1,8,1,8,1,8,1,5,0,5,5],
        [5,8,5,8,5,8,5,8,5,8,5,8,5,0,5,5],
        [5,2,8,0,8,1,8,1,8,1,8,1,7,0,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
    ],
    
    //Level 21
    [
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4],
        [3,1,13,13,13,13,13,13,13,13,13,13,13,13,13,13],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],
        [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1],
        [0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
    ],
    
    //Level 22
    [
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,14,9,9],
        [2,0,9,9,9,9,9,9,9,9,9,9,9,9,1,4],
        [3,0,1,1,1,1,1,1,1,1,1,1,1,16,9,9],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
        [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],
        [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
    ],
    
    //Level 23
    [
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,3,5,5,5,0,14,0,0,0,0,0,0,7,5],
        [5,5,0,5,5,5,0,14,5,5,5,5,5,0,0,5],
        [5,14,13,0,14,0,0,14,5,14,13,13,13,13,0,5],
        [5,14,5,5,14,5,5,14,5,14,5,5,5,0,0,5],
        [5,14,5,5,14,5,5,1,5,14,5,14,13,13,1,5],
        [5,14,5,5,14,1,1,1,1,14,1,14,1,0,0,5],
        [5,15,15,1,1,1,1,1,2,1,1,1,1,0,0,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,1,11,9,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,1,11,9,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,1,0,0,5],
        [5,5,5,5,5,5,5,5,5,5,15,15,1,0,0,5],
        [5,5,5,5,5,5,5,5,5,5,16,5,5,11,9,5],
        [5,5,5,5,5,5,5,5,4,0,16,0,0,11,9,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
    ],
    
    //Level 24
    [
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5],
        [1,1,10,10,10,10,10,14,14,14,14,14,5,5,1,5],
        [2,1,10,10,10,10,10,14,14,14,14,14,5,5,1,5],
        [5,5,0,0,0,0,0,1,1,1,1,1,5,5,1,5],
        [5,5,12,12,12,12,12,16,16,16,16,16,0,3,1,5],
        [5,5,12,12,12,12,12,16,16,16,16,16,0,0,1,5],
        [5,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5],
        [5,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5],
        [5,12,5,5,5,5,5,5,5,5,5,5,5,5,1,5],
        [5,12,9,9,9,9,9,9,9,9,9,9,9,9,9,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
    ],
    
    //Level 25
    [
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5],
        [5,5,5,5,5,5,5,1,1,1,1,1,5,5,5,5],
        [5,5,5,5,5,5,5,16,16,5,5,0,5,5,5,5],
        [5,5,5,5,5,5,5,16,16,5,5,0,5,5,5,5],
        [5,5,5,5,5,5,5,16,16,5,5,0,5,5,5,5],
        [5,5,5,5,2,1,1,16,16,5,5,0,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5],
        [5,5,5,5,3,0,0,0,0,0,0,0,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
    ],
    
    //Level 26
    [
        [11,11,10,11,11,11,11,11,11,10, 0, 9, 0, 0, 7, 0],
        [12,11,10, 9, 9, 9,11,11,12, 0,11,12,12, 0, 5, 0],
        [12, 9,11,11,10,12,12,11,11,10,12,11,12,12, 5, 0],
        [10, 9, 9, 9,10, 0,12,12, 0,10,12,12, 9,12, 5, 0],
        [10,10, 0,12,12, 9,12, 9,12,10,12,11,12,12, 5, 0],
        [10,10,12,12, 0,12, 9,12,12, 0,11,11,11,10, 5, 0],
        [10,10,12,12,12, 9, 9, 9, 9, 9, 9, 9, 0,10, 5, 0],
        [ 0,12,12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 0],
        [ 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0],
        [ 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 1,13,13,13, 5, 0],
        [ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5,16, 5, 0],
        [14,13,13,13,13,14,13,13,14,13, 1,13, 5,16, 5, 0],
        [15,15,15,14,16,14,14,16,15,14,15,16, 5,16, 5, 0],
        [15,15,14,14,16,13,15,15, 1,14,13,13, 5,16, 5, 0],
        [ 1, 1,14, 1, 1, 1,14,14,13,13,15,16, 5,16,13,13],
        [ 2, 1,15,15,16,16,13,15,15,15,16, 1, 5, 5 ,5, 3]
    ],
    
    //Level 27
    [
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,4,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5],
        [5,5,5,5,5,5,5,1,1,1,1,1,5,5,5,5],
        [5,5,5,5,5,5,5,14,14,5,5,0,5,5,5,5],
        [5,5,5,5,5,5,5,14,14,5,5,0,5,5,5,5],
        [5,5,5,5,5,5,5,14,14,0,0,0,5,5,5,5],
        [5,5,5,5,2,1,1,14,14,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,0,0,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,0,0,5,5,5,5,5,5,5],
        [5,5,5,5,3,0,0,0,0,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
        [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
    ],
    
    //Level 28
    [
        [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 0, 0, 0, 3],
        [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5,16, 0, 1, 0, 0],
        [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5,16, 0, 1, 0, 0],
        [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 0, 0, 1, 1, 1],
        [ 1,13,13,13,13,13,13,13,13,13, 5, 0, 0, 0, 0, 0],
        [ 1, 1, 1, 1, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 0, 0],
        [ 1, 1, 1,14, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0],
        [ 1, 1, 1,14, 5,10,13,13, 1, 0, 5, 0, 0, 0,12,12],
        [ 1, 1,14,14, 5, 1, 5, 4, 5, 0, 5, 0, 0, 0,12, 0],
        [ 1, 1, 1, 1, 5, 1, 0,11,11,16, 5, 0, 0, 0,12, 0],
        [ 5, 5, 5, 1, 5, 1, 1, 1, 1, 1, 5, 0, 0, 0,12, 0],
        [ 1, 1, 1, 1, 5, 6, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0],
        [ 1, 1, 1,14, 5,11,11,11,11,11,11,11,11,11,11, 0],
        [ 1, 1, 1,14, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [ 1, 1,14,14, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [ 2, 1, 1, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ],
    
    //Level 29
    [
        
        [ 5, 5, 5, 5, 5, 0, 1, 0, 9, 9, 9, 9, 9, 5, 5, 5],
        [ 5, 5, 5, 5, 5, 0, 2, 5, 5, 5, 5, 5,12, 5, 5, 5],
        [ 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5,12, 5, 5, 5],
        [ 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5,12, 5, 5, 5],
        [ 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 1,12, 5, 5, 5],
        [ 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 1, 5, 5, 5],
        [ 5, 8, 5, 8, 8, 8, 8, 1, 8, 8, 8, 5, 1, 5, 5, 5],
        [ 5, 8, 5, 8, 8, 8, 0, 8, 8, 8, 8, 5, 1, 5, 4, 5],
        [ 5, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 1, 5, 1, 5],
        [ 5, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5,10, 1,10, 5],
        [ 5, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5,10, 5,10, 5],
        [ 5, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5,10, 1,10, 5],
        [ 5, 8, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5,10, 5,10, 5],
        [ 5, 8, 5, 5, 5, 5, 5, 0, 9, 9, 9, 9, 9, 5,10, 5],
        [ 5, 8, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,10, 5],
        [ 5, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5]
    ]
];

//Sets all the highscores to 99
for(var i = 1; i < tileLayouts.length; i++){
    highScore[i] = 99;
}

//Creates tileGrid, a copy of tileLayouts that is changed in-game by the player (Thanks to Benjamin Clements and Blue Leaf)
var tileGrid = [["useless slot"]];
for(var i = 1; i < tileLayouts.length; i++){
    tileGrid.push([]);
    for(var y = 0; y < tileLayouts[i].length; y++){
        tileGrid[i].push([]);
        for(var x = 0; x < tileLayouts[i][y].length; x++){
            tileGrid[i][y].push({type: tileLayouts[i][y][x], beingChanged: 0, voidColor: 175});
        }
    }
}

//The undoSaves array, which stores tiledata as well as other things for when the undo button is pressed
var undoSaves = [];

//Debug cheats
var teleportOnClick = true;
var playerHitbox = false;
var showTargetBlock = false;
var showPlayer = true;

//Function that saves current tile data to undoSaves
var saveTileData = function(wipeMemory){
    if(wipeMemory === true){
        undoSaves = [];
        undoSaves.push([]);
    }
    if(wipeMemory === false){undoSaves.push([]);}
    if(wipeMemory === "arrow block"){undoSaves[undoSaves.length-1] = [];}
    for(var y = 0; y<tileGrid[level].length; y++){
        undoSaves[undoSaves.length-1].push([]);
        for(var x = 0; x<tileGrid[level][y].length; x++){
            undoSaves[undoSaves.length-1][y].push(tileGrid[level][y][x].type);
        }
    }
};

//Function that saves the player's position, current spawnpoint, and various other things to undoSaves
var saveLevelData = function(){
    undoSaves[undoSaves.length-1][16]=[blackX, blackY, whiteX, whiteY, blackJumpSpeed, whiteJumpSpeed, blackSpawnX, blackSpawnY, whiteSpawnX, whiteSpawnY, playingAs, blockPlaces];
};

//Undo function
var undo = function(){
    undoSaves.pop();
    blackX = undoSaves[undoSaves.length-1][16][0];
    blackY = undoSaves[undoSaves.length-1][16][1];
    blackJumpSpeed = undoSaves[undoSaves.length-1][16][4];
    blackSpawnX = undoSaves[undoSaves.length-1][16][6];
    blackSpawnY = undoSaves[undoSaves.length-1][16][7];
    if(whiteInLevel===true){
        whiteX = undoSaves[undoSaves.length-1][16][2];
        whiteY = undoSaves[undoSaves.length-1][16][3];
        whiteJumpSpeed = undoSaves[undoSaves.length-1][16][5];
        whiteSpawnX = undoSaves[undoSaves.length-1][16][8];
        whiteSpawnY = undoSaves[undoSaves.length-1][16][9];
    }
    playingAs = undoSaves[undoSaves.length-1][16][10];
    blockPlaces = undoSaves[undoSaves.length-1][16][11];
    tileGrid[level]=[];
    for(var y = 0; y < 16; y++){
        tileGrid[level].push([]);
        for(var x = 0; x < 16; x++){
            tileGrid[level][y].push({type: undoSaves[undoSaves.length-1][y][x], beingChanged: 0, voidColor: (playingAs*-100)+175});
        }
    }
};

//Restart function
var restart = function(){
    for(var i = 1; i < tileLayouts.length; i++){
        for(var y = 0; y < tileLayouts[i].length; y++){
            for(var x = 0; x < tileLayouts[i][y].length; x++){
                tileGrid[i][y][x].type = tileLayouts[i][y][x];
            }
        }
    }
    blockPlaces = 0;
    restartTimer = 1;
    saveTileData(true);
    if(level===7){
        whiteInLevel = false;
        playingAs = 0;
    }
};

//System that detects all keys being pressed (Thanks to google)
//Also contains various pieces of code because I can only run keyPressed once
var keyPressed = function() {
    keys[keyCode] = true;
    
    //Switches character if Z is pressed
    if(whiteInLevel===true && doubleSwitchTimer===0){
        if(keys[90]===true || keys[74] === true){
            playingAs++;
            if(playingAs===2){playingAs=0;}
            doubleSwitchTimer = 1;
        }
    }
    
    //Fancy shmancy thing to introduce white character (I really don't know how to make this not sound racist)
    if(level===7){
        if(whiteInLevel===false){
            if(keys[90]===true || keys[74] === true){
                tileGrid[7][8][0].type=3;
                whiteX = 12;
                whiteY = 210;
                whiteInLevel = true;
                playingAs=1;
            }
        }
    }
    
    //Press R to restart the current level
    if(keys[82]===true){restart();}
    
    //Stuff about time trials (not currently used)
    if(keyCode===fastestTimes[currentTime]){currentTime++;}
    if(currentTime===fastestTimes.length){
        personalBest=1;
        currentTime++;
    }
    
    //Press C or L to undo the last block place
    if((keys[67]===true || keys[76]===true) && undoSaves.length>1){undo();}
};

var keyReleased = function() {keys[keyCode] = false;};

//Black character's anatomy
var drawBlack = function() {
    noStroke();
    rectMode(CENTER);
    fill(0, 0, 0);
    if(playingAs===0){rect(blackX, blackY, 20 + bJumpAnim*-2, 20 + bJumpAnim*2, 7);
    } else {
        if(tileGrid[level][(blackY-blackY%25)/25][(blackX-blackX%25)/25].type===8){fill(127, 127, 127);}
        rect(blackX, blackY, 18, 18, 7);
    }
    fill(255, 255, 255);
    if(playingAs === 0){
        ellipse(blackX + eyePosition - bJumpAnim/2, blackY - 4 - blackJumpSpeed, 3, 3);
        ellipse(blackX + eyePosition - 8 + bJumpAnim/2, blackY - 4 - blackJumpSpeed, 3, 3);
    }
    
    blinkTimer+=0.5;
    if(blinkTimer>blinkReset){
        blinkTimer=0;
        blinkReset = random(90, 120);
    }
    
    if(playingAs === 0){
        if(blinkTimer>blinkReset-4){blackEyelidPos = blinkTimer-blinkReset+4;}
        if(blinkTimer<4){blackEyelidPos = -blinkTimer+4;}
        else{blackEyelidPos = 0;}
    }else{blackEyelidPos = 4;}
    
    rectMode(CORNER);
    fill(0, 0, 0);
    if(playingAs===0){
        rect((blackX+eyePosition-bJumpAnim/2)-2, blackY-6-blackJumpSpeed, 4, blackEyelidPos);
        rect((blackX + eyePosition - 8 + bJumpAnim/2)-2, blackY-6-blackJumpSpeed, 4, blackEyelidPos);
    }
};

//White character's anatomy
var drawWhite = function() {
    noStroke();
    rectMode(CENTER);
    fill(255, 255, 255);
    if(playingAs===1){rect(whiteX, whiteY, 20 + wJumpAnim*-2, 20 + wJumpAnim*2, 7);
    }else{
        if(tileGrid[level][(whiteY-whiteY%25)/25][(whiteX-whiteX%25)/25].type===8){fill(127, 127, 127);}
        rect(whiteX, whiteY, 18, 18, 7);
    }
    
    fill(0, 0, 0);
    if(playingAs===1){
        ellipse(whiteX + eyePosition - 8 + wJumpAnim/2, whiteY + 4 + whiteJumpSpeed, 3, 3);
        ellipse(whiteX + eyePosition - wJumpAnim/2, whiteY + 4 + whiteJumpSpeed, 3, 3);
    }
    
    if(playingAs===1){
        if(blinkTimer>blinkReset-4){whiteEyelidPos = blinkTimer-blinkReset+4;}
        if(blinkTimer<4){whiteEyelidPos = -blinkTimer+4;}
        else{whiteEyelidPos = 0;}
    }else{whiteEyelidPos=4;}
    
    rectMode(CORNER);
    fill(255, 255, 255);
    if(playingAs===1){
        rect((whiteX+eyePosition-8+wJumpAnim/2)-2, (whiteY+whiteJumpSpeed+4+2)-whiteEyelidPos, 4, whiteEyelidPos);
        rect((whiteX+eyePosition-wJumpAnim/2)-2, (whiteY+whiteJumpSpeed+4+2)-whiteEyelidPos, 4, whiteEyelidPos);
    }
};

//The ridiculously long tile function
var drawTile = function(tileX, tileY, tileType){
    //Black collision
    if(tileType===0 || tileType===3 || tileType===5 || tileType === 7 || (tileType >=9 && tileType <= 12)) {
        //Collision moving right
        if(blackX + 10 > tileX && blackX + 7 < tileX && blackY + 10 > tileY && blackY - 10 < tileY + 25) {
            againstWallR = true;
            blackX = tileX - 10;
        }
        else{againstWallR = false;}
        
        //Collision moving left
        if(blackX - 7 > tileX + 25 && blackX - 10 < tileX + 25 && blackY + 10 > tileY && blackY - 10 < tileY + 25){
            againstWallL = true;
            blackX = tileX + 35;
        }
        else{againstWallL = false;}
        
        //Ground collision
        if(blackX + 7 >= tileX && blackX - 7 <= tileX + 25 && blackY <= tileY + 13 && blackY + 10 >= tileY){
         blackOnGround = true;
            blackY = tileY-10;
        }
        
        //Ceiling collision
        if(blackX + 7 >= tileX && blackX - 7 <= tileX + 25 && blackY > tileY + 13 && blackY - 10 <= tileY + 25){
            blackJumpSpeed = -gravity;
            blackY = tileY+35;
            if(playingAs===0){midairJumpTimer = -1;}
            walkedOffLedge = false;
        }
        
        //Drawing black tile
        noStroke();
        rectMode(CORNER);
        fill(0, 0, 0);
        rect(tileX, tileY, 25, 25);
        
        //Animation for being placed
        if(tileGrid[level][tileY/25][tileX/25].beingChanged > 0){
            fill(255, 255, 255);
            rect(tileX, tileY, 25, 25);
            fill(0, 0, 0);
            rectMode(CENTER);
            rect(tileX+12.5, tileY+12.5, tileGrid[level][tileY/25][tileX/25].beingChanged*5, tileGrid[level][tileY/25][tileX/25].beingChanged*5);
            rectMode(CORNER);
        }
    }
    
    //White collision
    if(tileType===1 || tileType===2 || tileType===5 || tileType === 6 || (tileType >=13 && tileType <= 16)) {
        //Collision moving right
        if(whiteX + 10 > tileX && whiteX + 7 < tileX && whiteY + 10 > tileY && whiteY - 10 < tileY + 25) {
            againstWallR = true;
            whiteX = tileX - 10;
        }
        else{againstWallR = false;}
        
        //Collision moving left
        if(whiteX - 7 > tileX + 25 && whiteX - 10 < tileX + 25 && whiteY + 10 > tileY && whiteY - 10 < tileY + 25){
            againstWallL = true;
            whiteX = tileX + 35;
        }
        else{againstWallL = false;}
        
        //Ground collision
        if(whiteX + 7 >= tileX && whiteX - 7 <= tileX + 25 && whiteY >= tileY + 13 && whiteY - 10 <= tileY + 25){
         whiteOnGround = true;
            whiteY = tileY+35;
        }
        
        //Ceiling collision
        if(whiteX + 7 >= tileX && whiteX - 7 <= tileX + 25 && whiteY < tileY + 13 && whiteY + 10 >= tileY){
            whiteJumpSpeed = -gravity;
            whiteY = tileY-10;
            if(playingAs===1){midairJumpTimer = -1;}
            walkedOffLedge = false;
        }
        
        //Drawing the actual tile
        noStroke();
        rectMode(CORNER);
        fill(255, 255, 255);
        rect(tileX, tileY, 25, 25);
        
        //Animation for being placed
        if(tileGrid[level][tileY/25][tileX/25].beingChanged > 0){
            fill(0, 0, 0);
            rect(tileX, tileY, 25, 25);
            fill(255, 255, 255);
            rectMode(CENTER);
            rect(tileX+12.5, tileY+12.5, tileGrid[level][tileY/25][tileX/25].beingChanged*5, tileGrid[level][tileY/25][tileX/25].beingChanged*5);
            rectMode(CORNER);
        }
    }
    
    //Black's spawn block
    if(tileType===2){
        if(restartTimer > 0){
            blackSpawnX = tileX+12;
            blackSpawnY = tileY+12;
        }
        if(blackX+10 > tileX && blackX-10 < tileX+25 && blackY+10 > tileY && blackY-10 < tileY+25){
            blackSpawnX = tileX+12;
            blackSpawnY = tileY+12;
        }
        
        spawnAnimTimer +=0.5;
        if (spawnAnimTimer > 30) {
            spawnAnimTimer = 1;
        }
        
        if(blackSpawnX===tileX+12 && blackSpawnY===tileY+12){
            if(spawnAnimTimer <= 5) {
                rectMode(CORNER);
                fill(0, 0, 0);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(255, 255, 255);
                rect(tileX+12 - (spawnAnimTimer + 15)/2, tileY+12 - (spawnAnimTimer + 15)/2, spawnAnimTimer + 15, spawnAnimTimer + 15, 3);
                fill(0, 0, 0);
                rect(tileX+12 - spawnAnimTimer/2, tileY+12 - spawnAnimTimer/2, spawnAnimTimer, spawnAnimTimer, 3);
            } else if (spawnAnimTimer <= 15) {
                fill(255, 255, 255);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(0, 0, 0);
                rect(tileX+12 - spawnAnimTimer/2, tileY+12 - spawnAnimTimer/2, spawnAnimTimer, spawnAnimTimer, 3);
            } else if (spawnAnimTimer <= 20) {
                fill(255, 255, 255);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(0, 0, 0);
                rect(tileX+12 - spawnAnimTimer/2, tileY+12 - spawnAnimTimer/2, spawnAnimTimer, spawnAnimTimer, 3);
                fill(255, 255, 255);
                rect(tileX+12 - (spawnAnimTimer - 15)/2, tileY+12 - (spawnAnimTimer - 15)/2, spawnAnimTimer - 15, spawnAnimTimer - 15, 3);
            } else {
                fill(0, 0, 0);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(255, 255, 255);
                rect(tileX+12 - (spawnAnimTimer - 15)/2, tileY+12 - (spawnAnimTimer - 15)/2, spawnAnimTimer - 15, spawnAnimTimer - 15, 3);
            }
            
        } else {
            fill(0, 0, 0);
            rect(tileX+7, tileY+7, 11, 11, 3);
        }
    }
    
    //White's spawn block
    if(tileType===3){
        if(restartTimer > 0){
            whiteSpawnX = tileX+12;
            whiteSpawnY = tileY+12;
        }
        if(whiteX+10 > tileX && whiteX-10 < tileX+25 && whiteY+10 > tileY && whiteY-10 < tileY+25){
            whiteSpawnX = tileX+12;
            whiteSpawnY = tileY+12;
        }
        fill(127, 127, 127);
        if(whiteSpawnX===tileX+12 && whiteSpawnY===tileY+12){
            if(spawnAnimTimer <= 5) {
                rectMode(CORNER);
                fill(0, 0, 0);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(255, 255, 255);
                rect(tileX+12 - (spawnAnimTimer + 15)/2, tileY+12 - (spawnAnimTimer + 15)/2, spawnAnimTimer + 15, spawnAnimTimer + 15, 3);
                fill(0, 0, 0);
                rect(tileX+12 - spawnAnimTimer/2, tileY+12 - spawnAnimTimer/2, spawnAnimTimer, spawnAnimTimer, 3);
            } else if (spawnAnimTimer <= 15) {
                fill(255, 255, 255);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(0, 0, 0);
                rect(tileX+12 - spawnAnimTimer/2, tileY+12 - spawnAnimTimer/2, spawnAnimTimer, spawnAnimTimer, 3);
            } else if (spawnAnimTimer <= 20) {
                fill(255, 255, 255);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(0, 0, 0);
                rect(tileX+12 - spawnAnimTimer/2, tileY+12 - spawnAnimTimer/2, spawnAnimTimer, spawnAnimTimer, 3);
                fill(255, 255, 255);
                rect(tileX+12 - (spawnAnimTimer - 15)/2, tileY+12 - (spawnAnimTimer - 15)/2, spawnAnimTimer - 15, spawnAnimTimer - 15, 3);
            } else {
                fill(0, 0, 0);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(255, 255, 255);
                rect(tileX+12 - (spawnAnimTimer - 15)/2, tileY+12 - (spawnAnimTimer - 15)/2, spawnAnimTimer - 15, spawnAnimTimer - 15, 3);
            }
        } else {
            fill(255, 255, 255);
            rect(tileX+7, tileY+7, 11, 11, 3);
        }
    }
    
    //Goal
    if(tileType===4){
        if((blackX+10 > tileX && blackX-10 < tileX+25 && blackY+10 > tileY && blackY-10 < tileY+25)||(whiteX+10 > tileX && whiteX-10 < tileX+25 && whiteY+10 > tileY && whiteY-10 < tileY+25)){
            screen = "goal";
            tutorialTimer = 0;
            if(blockPlaces < highScore[level]){
                highScore[level] = blockPlaces;
            }
            if(highScore[level] < minBlockPlaces[level]){
                println("Wait!  You just got a score better than the perfect score for this level.  If you aren't cheating, that means the current perfect score isn't actually perfect.  Let me know your score in tips & thanks!");
            }
        }
        
        //Goal Animations
        goalAnimTimer+=0.5;
        if(goalAnimTimer > 40){
            goalAnimTimer = 1;
        }
        
        rectMode(CENTER);
        if(goalAnimTimer <=5){
            fill(255, 255, 255);
            rect(tileX+12.5, tileY+12.5, 25, 25);
            fill(0, 0, 0);
            rect(tileX+12.5, tileY+12.5, -goalAnimTimer+25, -goalAnimTimer+25, 5);
            fill(255, 255, 255);
            rect(tileX+12.5, tileY+12.5, -goalAnimTimer+5, -goalAnimTimer+5, 5);
        }else if(goalAnimTimer <=20){
            fill(255, 255, 255);
            rect(tileX+12.5, tileY+12.5, 25, 25);
            fill(0, 0, 0);
            rect(tileX+12.5, tileY+12.5, -goalAnimTimer+25, -goalAnimTimer+25, 5);
        }else if(goalAnimTimer<=25){
            fill(0, 0, 0);
            rect(tileX+12.5, tileY+12.5, 25, 25);
            fill(255, 255, 255);
            rect(tileX+12.5, tileY+12.5, -goalAnimTimer+45, -goalAnimTimer+45, 5);
            fill(0, 0, 0);
            rect(tileX+12.5, tileY+12.5, -goalAnimTimer+25, -goalAnimTimer+25, 5);
        }else{
            fill(0, 0, 0);
            rect(tileX+12.5, tileY+12.5, 25, 25);
            fill(255, 255, 255);
            rect(tileX+12.5, tileY+12.5, -goalAnimTimer+45, -goalAnimTimer+45, 5);
        }
        rectMode(CORNER);
    }
    
    //Grey Block
    if(tileType===5){
        rectMode(CORNER);
        fill(0, 0, 0);
        fill(127, 127, 127);
        rect(tileX, tileY, 25, 25);
    }
    
    //Black's Checkpoint
    if(tileType===6){
        rectMode(CORNER);
        fill(255, 255, 255);
        rect(tileX, tileY, 25, 25);
        if(blackX+10 > tileX && blackX-10 < tileX+25 && blackY+10 > tileY && blackY-10 < tileY+25 && restartTimer===0){
            blackSpawnX = tileX+12;
            blackSpawnY = tileY+15;
        }
        fill(127, 127, 127);
        if(blackSpawnX===tileX+12 && blackSpawnY===tileY+15){
            if(spawnAnimTimer <= 5) {
                fill(0, 0, 0);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(255, 255, 255);
                rect(tileX+12 - (spawnAnimTimer + 15)/2, tileY+12 - (spawnAnimTimer + 15)/2, spawnAnimTimer + 15, spawnAnimTimer + 15, 3);
                fill(0, 0, 0);
                rect(tileX+12 - spawnAnimTimer/2, tileY+12 - spawnAnimTimer/2, spawnAnimTimer, spawnAnimTimer, 3);
            } else if (spawnAnimTimer <= 15) {
                fill(255, 255, 255);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(0, 0, 0);
                rect(tileX+12 - spawnAnimTimer/2, tileY+12 - spawnAnimTimer/2, spawnAnimTimer, spawnAnimTimer, 3);
            } else if (spawnAnimTimer <= 20) {
                fill(255, 255, 255);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(0, 0, 0);
                rect(tileX+12 - spawnAnimTimer/2, tileY+12 - spawnAnimTimer/2, spawnAnimTimer, spawnAnimTimer, 3);
                fill(255, 255, 255);
                rect(tileX+12 - (spawnAnimTimer - 15)/2, tileY+12 - (spawnAnimTimer - 15)/2, spawnAnimTimer - 15, spawnAnimTimer - 15, 3);
            } else {
                fill(0, 0, 0);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(255, 255, 255);
                rect(tileX+12 - (spawnAnimTimer - 15)/2, tileY+12 - (spawnAnimTimer - 15)/2, spawnAnimTimer - 15, spawnAnimTimer - 15, 3);
            }
        } else {
            fill(0, 0, 0);
            rect(tileX+7, tileY+7, 11, 11, 3);
        }
    }
    
    //White's Checkpoint
    if(tileType===7){
        rectMode(CORNER);
        fill(0, 0, 0);
        rect(tileX, tileY, 25, 25);
        if(whiteX+10 > tileX && whiteX-10 < tileX+25 && whiteY+10 > tileY && whiteY-10 < tileY+25 && restartTimer===0){
            whiteSpawnX = tileX+12;
            whiteSpawnY = tileY+10;
        }
        fill(127, 127, 127);
        if(whiteSpawnX===tileX+12 && whiteSpawnY===tileY+10){
            if(spawnAnimTimer <= 5) {
                fill(255, 255, 255);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(0, 0, 0);
                rect(tileX+12 - (spawnAnimTimer + 15)/2, tileY+12 - (spawnAnimTimer + 15)/2, spawnAnimTimer + 15, spawnAnimTimer + 15, 3);
                fill(255, 255, 255);
                rect(tileX+12 - spawnAnimTimer/2, tileY+12 - spawnAnimTimer/2, spawnAnimTimer, spawnAnimTimer, 3);
            } else if (spawnAnimTimer <= 15) {
                fill(0, 0, 0);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(255, 255, 255);
                rect(tileX+12 - spawnAnimTimer/2, tileY+12 - spawnAnimTimer/2, spawnAnimTimer, spawnAnimTimer, 3);
            } else if (spawnAnimTimer <= 20) {
                fill(0, 0, 0);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(255, 255, 255);
                rect(tileX+12 - spawnAnimTimer/2, tileY+12 - spawnAnimTimer/2, spawnAnimTimer, spawnAnimTimer, 3);
                fill(0, 0, 0);
                rect(tileX+12 - (spawnAnimTimer - 15)/2, tileY+12 - (spawnAnimTimer - 15)/2, spawnAnimTimer - 15, spawnAnimTimer - 15, 3);
            } else {
                fill(255, 255, 255);
                rect(tileX+2, tileY+2, 20, 20, 3);
                fill(0, 0, 0);
                rect(tileX+12 - (spawnAnimTimer - 15)/2, tileY+12 - (spawnAnimTimer - 15)/2, spawnAnimTimer - 15, spawnAnimTimer - 15, 3);
            }
        } else {
            fill(255, 255, 255);
            rect(tileX+7, tileY+7, 11, 11, 3);
        }
    }
    
    //Void Block
    if(tileType===8){
        rectMode(CORNER);
        if(playingAs===0 && tileGrid[level][tileY/25][tileX/25].voidColor<195){tileGrid[level][tileY/25][tileX/25].voidColor+=15;}
        if(playingAs===1 && tileGrid[level][tileY/25][tileX/25].voidColor>60){tileGrid[level][tileY/25][tileX/25].voidColor-=15;}
        fill(tileGrid[level][tileY/25][tileX/25].voidColor, tileGrid[level][tileY/25][tileX/25].voidColor, tileGrid[level][tileY/25][tileX/25].voidColor);
        noStroke();
        rect(tileX, tileY, 25, 25);
    }
    
    //Black Arrow Right
    if(tileType===9){
        if(tileGrid[level][tileY/25][tileX/25-1].beingChanged>2 && ((tileGrid[level][tileY/25][tileX/25-1].type===1) || (tileGrid[level][tileY/25][tileX/25-1].type>=13 && tileGrid[level][tileY/25][tileX/25-1].type<=16))){
            tileGrid[level][tileY/25][tileX/25].type = 13;
            tileGrid[level][tileY/25][tileX/25].beingChanged = 1;
            saveTileData("arrow block");
            if(whiteX+10 > tileX && whiteX-10 < tileX+25 && whiteY+10 > tileY && whiteY-10 < tileY+25){
                whiteX = whiteSpawnX;
                whiteY = whiteSpawnY;
            }
        }
        
        noStroke();
        fill(255, 255, 255);
        triangle(tileX+3, tileY+3, tileX+12.5, tileY+12.5, tileX+3, tileY+22);
        
        strokeWeight(2);
        stroke(60, 60, 60);
        if(tileX !== 375){
            if(tileGrid[level][tileY/25][tileX/25+1].type !== 9){line(tileX+24, tileY+1, tileX+24, tileY+24);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX+23, tileY, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
            }
        }else{line(tileX+24, tileY+1, tileX+24, tileY+24);}
        
        if(tileY !== 0){
            if(tileGrid[level][tileY/25-1][tileX/25].type !== 10){line(tileX+1, tileY+1, tileX+24, tileY+1);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
                }
        }else{line(tileX+1, tileY+1, tileX+24, tileY+1);}
        
        if(tileX !== 0){
            if(tileGrid[level][tileY/25][tileX/25-1].type <9 || tileGrid[level][tileY/25][tileX/25-1].type > 12){line(tileX+1, tileY+1, tileX+1, tileY+24);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
                }
        }else{line(tileX+1, tileY+1, tileX+1, tileY+24);}
        
        if(tileY !== 375){
            if(tileGrid[level][tileY/25+1][tileX/25].type !== 12){line(tileX+1, tileY+24, tileX+24, tileY+24);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX+23, tileY+23, 2, 2);
                rect(tileX, tileY+23, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
            }
        }else{line(tileX+1, tileY+24, tileX+24, tileY+24);}
    }
    
    //Black Arrow Up
    if(tileType===10){
        if(tileGrid[level][tileY/25+1][tileX/25].beingChanged>0 && ((tileGrid[level][tileY/25+1][tileX/25].type===1) || (tileGrid[level][tileY/25+1][tileX/25].type>=13 && tileGrid[level][tileY/25+1][tileX/25].type<=16))){
            tileGrid[level][tileY/25][tileX/25].type = 14;
            tileGrid[level][tileY/25][tileX/25].beingChanged = 1;
            saveTileData("arrow block");
            if(whiteX+10 > tileX && whiteX-10 < tileX+25 && whiteY+10 > tileY && whiteY-10 < tileY+25){
                whiteX = whiteSpawnX;
                whiteY = whiteSpawnY;
            }
        }
        
        noStroke();
        fill(255, 255, 255);
        triangle(tileX+3, tileY+22, tileX+12.5, tileY+12.5, tileX+22, tileY+22);
        
        strokeWeight(2);
        stroke(60, 60, 60);
        if(tileX !== 375){
            if(tileGrid[level][tileY/25][tileX/25+1].type !== 9){line(tileX+24, tileY+1, tileX+24, tileY+24);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX+23, tileY, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
            }
        }else{line(tileX+24, tileY+1, tileX+24, tileY+24);}
        
        if(tileY !== 0){
            if(tileGrid[level][tileY/25-1][tileX/25].type !== 10){line(tileX+1, tileY+1, tileX+24, tileY+1);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
                }
        }else{line(tileX+1, tileY+1, tileX+24, tileY+1);}
        
        if(tileX !== 0){
            if(tileGrid[level][tileY/25][tileX/25-1].type !== 11){line(tileX+1, tileY+1, tileX+1, tileY+24);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
                }
        }else{line(tileX+1, tileY+1, tileX+1, tileY+24);}
        
        if(tileY !== 375){
            if(tileGrid[level][tileY/25+1][tileX/25].type < 9 || tileGrid[level][tileY/25+1][tileX/25].type > 12){line(tileX+1, tileY+24, tileX+24, tileY+24);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX+23, tileY+23, 2, 2);
                rect(tileX, tileY+23, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
            }
        }else{line(tileX+1, tileY+24, tileX+24, tileY+24);}
    }
    
    //Black Arrow Left
    if(tileType===11){
        if(tileGrid[level][tileY/25][tileX/25+1].beingChanged>0 && ((tileGrid[level][tileY/25][tileX/25+1].type===1) || (tileGrid[level][tileY/25][tileX/25+1].type>=13 && tileGrid[level][tileY/25][tileX/25+1].type<=16))){
            tileGrid[level][tileY/25][tileX/25].type = 15;
            tileGrid[level][tileY/25][tileX/25].beingChanged = 1;
            saveTileData("arrow block");
            if(whiteX+10 > tileX && whiteX-10 < tileX+25 && whiteY+10 > tileY && whiteY-10 < tileY+25){
                whiteX = whiteSpawnX;
                whiteY = whiteSpawnY;
            }
        }
        
        noStroke();
        fill(255, 255, 255);
        triangle(tileX+22, tileY+22, tileX+12.5, tileY+12.5, tileX+22, tileY+3);
        
        strokeWeight(2);
        stroke(60, 60, 60);
        if(tileX !== 375){
            if(tileGrid[level][tileY/25][tileX/25+1].type < 9 || tileGrid[level][tileY/25][tileX/25+1].type > 12){line(tileX+24, tileY+1, tileX+24, tileY+24);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX+23, tileY, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
            }
        }else{line(tileX+24, tileY+1, tileX+24, tileY+24);}
        
        if(tileY !== 0){
            if(tileGrid[level][tileY/25-1][tileX/25].type !== 10){line(tileX+1, tileY+1, tileX+24, tileY+1);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
                }
        }else{line(tileX+1, tileY+1, tileX+24, tileY+1);}
        
        if(tileX !== 0){
            if(tileGrid[level][tileY/25][tileX/25-1].type !== 11){line(tileX+1, tileY+1, tileX+1, tileY+24);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
                }
        }else{line(tileX+1, tileY+1, tileX+1, tileY+24);}
        
        if(tileY !== 375){
            if(tileGrid[level][tileY/25+1][tileX/25].type !== 12){line(tileX+1, tileY+24, tileX+24, tileY+24);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX+23, tileY+23, 2, 2);
                rect(tileX, tileY+23, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
            }
        }else{line(tileX+1, tileY+24, tileX+24, tileY+24);}
    }
    
    //Black Arrow Down
    if(tileType===12){
        if(tileGrid[level][tileY/25-1][tileX/25].beingChanged>2 && ((tileGrid[level][tileY/25-1][tileX/25].type===1) || (tileGrid[level][tileY/25-1][tileX/25].type>=13 && tileGrid[level][tileY/25-1][tileX/25].type<=16))){
            tileGrid[level][tileY/25][tileX/25].type = 16;
            tileGrid[level][tileY/25][tileX/25].beingChanged = 1;
            saveTileData("arrow block");
            if(whiteX+10 > tileX && whiteX-10 < tileX+25 && whiteY+10 > tileY && whiteY-10 < tileY+25){
                whiteX = whiteSpawnX;
                whiteY = whiteSpawnY;
            }
        }
        
        noStroke();
        fill(255, 255, 255);
        triangle(tileX+22, tileY+3, tileX+12.5, tileY+12.5, tileX+3, tileY+3);
        
        strokeWeight(2);
        stroke(60, 60, 60);
        if(tileX !== 375){
            if(tileGrid[level][tileY/25][tileX/25+1].type !== 9){line(tileX+24, tileY+1, tileX+24, tileY+24);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX+23, tileY, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
            }
        }else{line(tileX+24, tileY+1, tileX+24, tileY+24);}
        
        if(tileY !== 0){
            if(tileGrid[level][tileY/25-1][tileX/25].type < 9 || tileGrid[level][tileY/25-1][tileX/25].type > 12){line(tileX+1, tileY+1, tileX+24, tileY+1);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
                }
        }else{line(tileX+1, tileY+1, tileX+24, tileY+1);}
        
        if(tileX !== 0){
            if(tileGrid[level][tileY/25][tileX/25-1].type !== 11){line(tileX+1, tileY+1, tileX+1, tileY+24);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
                }
        }else{line(tileX+1, tileY+1, tileX+1, tileY+24);}
        
        if(tileY !== 375){
            if(tileGrid[level][tileY/25+1][tileX/25].type !== 12){line(tileX+1, tileY+24, tileX+24, tileY+24);}else{
                noStroke();
                fill(60, 60, 60);
                rect(tileX+23, tileY+23, 2, 2);
                rect(tileX, tileY+23, 2, 2);
                strokeWeight(2);
                stroke(60, 60, 60);
            }
        }else{line(tileX+1, tileY+24, tileX+24, tileY+24);}
    }
    
    //White Arrow Right
    if(tileType===13){
        if(tileGrid[level][tileY/25][tileX/25-1].beingChanged>2 && ((tileGrid[level][tileY/25][tileX/25-1].type===0) || (tileGrid[level][tileY/25][tileX/25-1].type>=9 && tileGrid[level][tileY/25][tileX/25-1].type<=12))){
            tileGrid[level][tileY/25][tileX/25].type = 9;
            tileGrid[level][tileY/25][tileX/25].beingChanged = 1;
            saveTileData("arrow block");
            if(blackX+10 > tileX && blackX-10 < tileX+25 && blackY+10 > tileY && blackY-10 < tileY+25){
                blackX = blackSpawnX;
                blackY = blackSpawnY;
            }
        }
        
        noStroke();
        fill(0, 0, 0);
        triangle(tileX+3, tileY+3, tileX+12.5, tileY+12.5, tileX+3, tileY+22);
        
        strokeWeight(2);
        stroke(230, 230, 230);
        if(tileX !== 375){
            if(tileGrid[level][tileY/25][tileX/25+1].type !== 13){line(tileX+24, tileY+1, tileX+24, tileY+24);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX+23, tileY, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
            }
        }else{line(tileX+24, tileY+1, tileX+24, tileY+24);}
        
        if(tileY !== 0){
            if(tileGrid[level][tileY/25-1][tileX/25].type !== 14){line(tileX+1, tileY+1, tileX+24, tileY+1);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
                }
        }else{line(tileX+1, tileY+1, tileX+24, tileY+1);}
        
        if(tileX !== 0){
            if(tileGrid[level][tileY/25][tileX/25-1].type <13){line(tileX+1, tileY+1, tileX+1, tileY+24);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
                }
        }else{line(tileX+1, tileY+1, tileX+1, tileY+24);}
        
        if(tileY !== 375){
            if(tileGrid[level][tileY/25+1][tileX/25].type !== 16){line(tileX+1, tileY+24, tileX+24, tileY+24);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX+23, tileY+23, 2, 2);
                rect(tileX, tileY+23, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
            }
        }else{line(tileX+1, tileY+24, tileX+24, tileY+24);}
    }
    
    //White Arrow Up
    if(tileType===14){
        if(tileGrid[level][tileY/25+1][tileX/25].beingChanged>0 && ((tileGrid[level][tileY/25+1][tileX/25].type===0) || (tileGrid[level][tileY/25+1][tileX/25].type>=9 && tileGrid[level][tileY/25+1][tileX/25].type<=12))){
            tileGrid[level][tileY/25][tileX/25].type = 10;
            tileGrid[level][tileY/25][tileX/25].beingChanged = 1;
            saveTileData("arrow block");
            if(blackX+10 > tileX && blackX-10 < tileX+25 && blackY+10 > tileY && blackY-10 < tileY+25){
                blackX = blackSpawnX;
                blackY = blackSpawnY;
            }
        }
        
        noStroke();
        fill(0, 0, 0);
        triangle(tileX+3, tileY+22, tileX+12.5, tileY+12.5, tileX+22, tileY+22);
        
        strokeWeight(2);
        stroke(230, 230, 230);
        if(tileX !== 375){
            if(tileGrid[level][tileY/25][tileX/25+1].type !== 13){line(tileX+24, tileY+1, tileX+24, tileY+24);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX+23, tileY, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
            }
        }else{line(tileX+24, tileY+1, tileX+24, tileY+24);}
        
        if(tileY !== 0){
            if(tileGrid[level][tileY/25-1][tileX/25].type !== 14){line(tileX+1, tileY+1, tileX+24, tileY+1);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
                }
        }else{line(tileX+1, tileY+1, tileX+24, tileY+1);}
        
        if(tileX !== 0){
            if(tileGrid[level][tileY/25][tileX/25-1].type !== 15){line(tileX+1, tileY+1, tileX+1, tileY+24);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
                }
        }else{line(tileX+1, tileY+1, tileX+1, tileY+24);}
        
        if(tileY !== 375){
            if(tileGrid[level][tileY/25+1][tileX/25].type < 13){line(tileX+1, tileY+24, tileX+24, tileY+24);}else{
                noStroke();
                fill(240, 240, 240);
                rect(tileX+23, tileY+23, 2, 2);
                rect(tileX, tileY+23, 2, 2);
                strokeWeight(2);
                stroke(240, 240, 240);
            }
        }else{line(tileX+1, tileY+24, tileX+24, tileY+24);}
    }
    
    //White Arrow Left
    if(tileType===15){
        if(tileGrid[level][tileY/25][tileX/25+1].beingChanged>0 && ((tileGrid[level][tileY/25][tileX/25+1].type===0) || (tileGrid[level][tileY/25][tileX/25+1].type>=9 && tileGrid[level][tileY/25][tileX/25+1].type<=12))){
            tileGrid[level][tileY/25][tileX/25].type = 11;
            tileGrid[level][tileY/25][tileX/25].beingChanged = 1;
            saveTileData("arrow block");
            if(blackX+10 > tileX && blackX-10 < tileX+25 && blackY+10 > tileY && blackY-10 < tileY+25){
                blackX = blackSpawnX;
                blackY = blackSpawnY;
            }
        }
        
        noStroke();
        fill(0, 0, 0);
        triangle(tileX+22, tileY+22, tileX+12.5, tileY+12.5, tileX+22, tileY+3);
        
        strokeWeight(2);
        stroke(230, 230, 230);
        if(tileX !== 375){
            if(tileGrid[level][tileY/25][tileX/25+1].type < 13){line(tileX+24, tileY+1, tileX+24, tileY+24);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX+23, tileY, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
            }
        }else{line(tileX+24, tileY+1, tileX+24, tileY+24);}
        
        if(tileY !== 0){
            if(tileGrid[level][tileY/25-1][tileX/25].type !== 14){line(tileX+1, tileY+1, tileX+24, tileY+1);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
                }
        }else{line(tileX+1, tileY+1, tileX+24, tileY+1);}
        
        if(tileX !== 0){
            if(tileGrid[level][tileY/25][tileX/25-1].type !== 15){line(tileX+1, tileY+1, tileX+1, tileY+24);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
                }
        }else{line(tileX+1, tileY+1, tileX+1, tileY+24);}
        
        if(tileY !== 375){
            if(tileGrid[level][tileY/25+1][tileX/25].type !== 16){line(tileX+1, tileY+24, tileX+24, tileY+24);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX+23, tileY+23, 2, 2);
                rect(tileX, tileY+23, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
            }
        }else{line(tileX+1, tileY+24, tileX+24, tileY+24);}
    }
    
    //White Arrow Down
    if(tileType===16){
        if(tileGrid[level][tileY/25-1][tileX/25].beingChanged>2 && ((tileGrid[level][tileY/25-1][tileX/25].type===0) || (tileGrid[level][tileY/25-1][tileX/25].type>=9 && tileGrid[level][tileY/25-1][tileX/25].type<=12))){
            tileGrid[level][tileY/25][tileX/25].type = 12;
            tileGrid[level][tileY/25][tileX/25].beingChanged = 1;
            saveTileData("arrow block");
            if(blackX+10 > tileX && blackX-10 < tileX+25 && blackY+10 > tileY && blackY-10 < tileY+25){
                blackX = blackSpawnX;
                blackY = blackSpawnY;
            }
        }
        
        noStroke();
        fill(0, 0, 0);
        triangle(tileX+22, tileY+3, tileX+12.5, tileY+12.5, tileX+3, tileY+3);
        
        strokeWeight(2);
        stroke(230, 230, 230);
        if(tileX !== 375){
            if(tileGrid[level][tileY/25][tileX/25+1].type !== 13){line(tileX+24, tileY+1, tileX+24, tileY+24);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX+23, tileY, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
            }
        }else{line(tileX+24, tileY+1, tileX+24, tileY+24);}
        
        if(tileY !== 0){
            if(tileGrid[level][tileY/25-1][tileX/25].type < 13){line(tileX+1, tileY+1, tileX+24, tileY+1);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
                }
        }else{line(tileX+1, tileY+1, tileX+24, tileY+1);}
        
        if(tileX !== 0){
            if(tileGrid[level][tileY/25][tileX/25-1].type !== 15){line(tileX+1, tileY+1, tileX+1, tileY+24);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX, tileY, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
                }
        }else{line(tileX+1, tileY+1, tileX+1, tileY+24);}
        
        if(tileY !== 375){
            if(tileGrid[level][tileY/25+1][tileX/25].type !== 16){line(tileX+1, tileY+24, tileX+24, tileY+24);}else{
                noStroke();
                fill(230, 230, 230);
                rect(tileX+23, tileY+23, 2, 2);
                rect(tileX, tileY+23, 2, 2);
                strokeWeight(2);
                stroke(230, 230, 230);
            }
        }else{line(tileX+1, tileY+24, tileX+24, tileY+24);}
    }
    
    //White when deactivated
    if(tileType===17){
        //Collision moving right
        if(blackX + 10 > tileX && blackX + 7 < tileX && blackY + 10 > tileY && blackY - 10 < tileY + 18) {
            againstWallR = true;
            blackX = tileX - 10;
        }
        else{againstWallR = false;}
        
        //Collision moving left
        if(blackX - 7 > tileX + 16 && blackX - 10 < tileX + 16 && blackY + 10 > tileY && blackY - 10 < tileY + 18){
            againstWallL = true;
            blackX = tileX + 26;
        }
        else{againstWallL = false;}
        
        //Ground collision
        if(blackX + 7 >= tileX && blackX - 7 <= tileX + 16 && blackY <= tileY + 9 && blackY + 10 >= tileY){
         blackOnGround = true;
            blackY = tileY-10;
        }
        
        //Ceiling collision
        if(blackX + 7 >= tileX && blackX - 7 <= tileX + 16 && blackY > tileY + 9 && blackY - 10 <= tileY + 16){
            blackJumpSpeed = -gravity;
            blackY = tileY+26;
            midairJumpTimer = -1;
            walkedOffLedge = false;
        }
    }
    
    //Black when deactivated
    if(tileType===18){
        //Collision moving right
        if(whiteX + 10 > tileX && whiteX + 7 < tileX && whiteY + 10 > tileY && whiteY - 10 < tileY + 18) {
            againstWallR = true;
            whiteX = tileX - 10;
        }
        else{againstWallR = false;}
        
        //Collision moving left
        if(whiteX - 7 > tileX + 17 && whiteX - 10 < tileX + 17 && whiteY + 10 > tileY && whiteY - 10 < tileY + 18){
            againstWallL = true;
            whiteX = tileX + 27;
        }
        else{againstWallL = false;}
        
        //Ground collision
        if(whiteX + 7 >= tileX && whiteX - 7 <= tileX + 18 && whiteY >= tileY + 9 && whiteY - 10 <= tileY + 17){
         whiteOnGround = true;
            whiteY = tileY+27;
        }
        
        //Ceiling collision
        if(whiteX + 7 >= tileX && whiteX - 7 <= tileX + 18 && whiteY < tileY + 9 && whiteY + 10 >= tileY){
            whiteJumpSpeed = -gravity;
            whiteY = tileY-10;
            midairJumpTimer = -1;
        }}
    
    //Controls .beingChanged
    if(tileType<=16){
        if(tileGrid[level][tileY/25][tileX/25].beingChanged > 0){tileGrid[level][tileY/25][tileX/25].beingChanged ++;}
        if(tileGrid[level][tileY/25][tileX/25].beingChanged > 4){tileGrid[level][tileY/25][tileX/25].beingChanged = 0;}
    }
};

draw = function() {
    background(255, 0, 0);
    
    //Telling the game to not spawn the white character in levels 1-6
    if(level>=0 && level<=6){whiteInLevel = false;}
    if(level>7){whiteInLevel = true;}
    
    //Controls restartTimer
    if(restartTimer > 1){
        blackX = blackSpawnX;
        blackY = blackSpawnY;
        blackJumpSpeed = 0;
        whiteX = whiteSpawnX;
        whiteY = whiteSpawnY;
        whiteJumpSpeed = 0;
    }
    if(restartTimer > 2){restartTimer = 0;}
    if(restartTimer > 0){restartTimer++;}
    
    //Controls doubleClickTimer
    if(doubleClickTimer > 0){doubleClickTimer++;}
    if(doubleClickTimer > 20){doubleClickTimer = 0;}
    
    //Controls doublePauseTimer
    if(doublePauseTimer > 0){doublePauseTimer++;}
    if(doublePauseTimer > 15){doublePauseTimer = 0;}
    
    //Makes sure that the characters and level are only drawn if the game is not in a menu
    if(screen==="game"){
        //Various timers for various things
        if(doublePlaceTimer > 0){
            doublePlaceTimer++;
            if(doublePlaceTimer > 15){doublePlaceTimer = 0;}
        }
        if(doubleSwitchTimer > 0){
            doubleSwitchTimer++;
            if(doubleSwitchTimer > 5){doubleSwitchTimer = 0;}
        }
        if(midairJumpTimer > 0){
            midairJumpTimer++;
            if(midairJumpTimer > 7){midairJumpTimer = 0;}
        }
        if(playingAs===0 && blackOnGround === false && blackJumpSpeed === 0){midairJumpTimer++;}
        if(playingAs===0 && blackOnGround === true){midairJumpTimer = 0;}
        if(playingAs===1 && whiteOnGround === false && whiteJumpSpeed === 0){midairJumpTimer++;}
        if(playingAs===1 && whiteOnGround === true){midairJumpTimer = 0;}
        
        //controlScheme variable, which detects whether the player is using WASD or arrow keys
        if(keys[37]===true || keys[38]===true || keys[39]===true || keys[40]===true){
            controlScheme = "Arrow keys";
        }
        if(keys[65]===true || keys[68]===true || keys[83]===true || keys[87]===true){
            controlScheme = "WASD";
        }
        
        //Player actions and canvas collision
        if(playingAs===0){
            //Moves square left or right depending on keyboard input
            if((keys[39] === true || keys[68] === true) && againstWallR === false){
                blackX += walkSpeed;
            }
            if((keys[37] === true || keys[65] === true) && againstWallL === false){
                blackX -= walkSpeed;
            }
            
            if(blackOnGround === true){
                blackJumpSpeed = gravity;
            }
            
            //Starts a jump if up or down is being pressed
            if(blackOnGround === true || midairJumpTimer > 0){
                if(keys[38] === true || keys[40] === true || keys[87]  === true || keys[83]===true){
                    blackJumpSpeed = jumpPower+midairJumpTimer/25;
                    midairJumpTimer = 0;
                    walkedOffLedge = false;
                }
            }
            
            //The code for the switching mechanic, pressing Z, is in the keyPressed function, underneath the key detection code.
            
            //Places black block if X is pressed, or changes white arrow blocks to black ones
            if((keys[88]===true || keys[75] === true) && doublePlaceTimer===0){
                //(blackX-blackX%25)/25 is the x coord of the block that black is standing on
                if(tileGrid[level][(blackY-blackY%25)/25][(blackX-blackX%25)/25].type!==2 && tileGrid[level][(blackY-blackY%25)/25][(blackX-blackX%25)/25].type!==6 && tileGrid[level][(blackY-blackY%25)/25][(blackX-blackX%25)/25].type!==8){
                    if(tileGrid[level][(blackY-blackY%25)/25][(blackX-blackX%25)/25].type===1){tileGrid[level][(blackY-blackY%25)/25][(blackX-blackX%25)/25].type=0;}
                    if(tileGrid[level][(blackY-blackY%25)/25][(blackX-blackX%25)/25].type>=13 && tileGrid[level][(blackY-blackY%25)/25][(blackX-blackX%25)/25].type<=16){tileGrid[level][(blackY-blackY%25)/25][(blackX-blackX%25)/25].type-=4;}
                    tileGrid[level][(blackY-blackY%25)/25][(blackX-blackX%25)/25].beingChanged = 1;
                    blackX = blackSpawnX;
                    blackY = blackSpawnY;
                    blackJumpSpeed = 0;
                    doublePlaceTimer=1;
                    blockPlaces++;
                    saveTileData(false);
                }else{
                    blackX = blackSpawnX;
                    blackY = blackSpawnY;
                    blackJumpSpeed = 0;
                    doublePlaceTimer=1;
                }
            }
            
            //Gravity physics
            blackJumpSpeed -= gravity;
            blackY -= blackJumpSpeed;
            
            //Canvas ground collision
            if(blackY > 388){
                blackY = 389;
                blackOnGround = true;
            }
            else{blackOnGround = false;}
            
            //Canvas wall collision
            if(blackX > 389){
                blackX = 390;
                againstWallR = true;
            }
            else{
                againstWallR = false;
            }
            
            if(blackX < 11){
                blackX = 11;
                againstWallL = true;
            }
            else{
                againstWallL = false;
            }
            
            //Canvas ceiling collision
            if(blackY < 10){
                blackY = 10;
                blackJumpSpeed = 0;
                midairJumpTimer = -1;
            }
            
            //Collision for deactivated white character
            if(whiteInLevel===true){drawTile(whiteX-8, whiteY-8, 17);}
        }
        
        if(playingAs===1){
            //Moves square left or right depending on keyboard input
            if((keys[39] === true || keys[68] === true) && againstWallR === false){
                whiteX += walkSpeed;
            }
            if((keys[37] === true || keys[65] === true) && againstWallL === false){
                whiteX -= walkSpeed;
            }
            
            if(whiteOnGround === true){
                whiteJumpSpeed = gravity;
            }
            
            //Starts a jump if up or down is being pressed
            if(whiteOnGround === true || midairJumpTimer > 0){
                if(keys[38] === true || keys[40] === true || keys[87]  === true || keys[83]===true){
                    whiteJumpSpeed = jumpPower+midairJumpTimer/25;
                    midairJumpTimer = 0;
                    walkedOffLedge = false;
                }
            }
            
            //Switching code is in keyPressed function, in the key detection code
            
            //Places white block if X is pressed
            if((keys[88]===true || keys[75] === true) && doublePlaceTimer===0){
                if(tileGrid[level][(whiteY-whiteY%25)/25][(whiteX-whiteX%25)/25].type!==3 && tileGrid[level][(whiteY-whiteY%25)/25][(whiteX-whiteX%25)/25].type!==7 && tileGrid[level][(whiteY-whiteY%25)/25][(whiteX-whiteX%25)/25].type!==8){
                    if(tileGrid[level][(whiteY-whiteY%25)/25][(whiteX-whiteX%25)/25].type===0){tileGrid[level][(whiteY-whiteY%25)/25][(whiteX-whiteX%25)/25].type=1;}
                    if(tileGrid[level][(whiteY-whiteY%25)/25][(whiteX-whiteX%25)/25].type >=9 && tileGrid[level][(whiteY-whiteY%25)/25][(whiteX-whiteX%25)/25].type<=12){tileGrid[level][(whiteY-whiteY%25)/25][(whiteX-whiteX%25)/25].type+=4;}
                    tileGrid[level][(whiteY-whiteY%25)/25][(whiteX-whiteX%25)/25].beingChanged = 1;
                    whiteX = whiteSpawnX;
                    whiteY = whiteSpawnY;
                    whiteJumpSpeed = 0;
                    doublePlaceTimer = 1;
                    blockPlaces++;
                    saveTileData(false);
                }else{
                    whiteX = whiteSpawnX;
                    whiteY = whiteSpawnY;
                    whiteJumpSpeed = 0;
                    doublePlaceTimer = 1;
                }
            }
            
            //Gravity mechanics
            whiteJumpSpeed -= gravity;
            whiteY += whiteJumpSpeed;
            
            //Canvas ground collision
            if(whiteY < 11){
                whiteY = 10;
                whiteOnGround = true;
            }
            else{whiteOnGround = false;}
            
            //Canvas wall collision
            if(whiteX > 389){
                whiteX = 390;
                againstWallR = true;
            }
            else{
                againstWallR = false;
            }
            if(whiteX < 11){
                whiteX = 10;
                againstWallL = true;
            }
            else{
                againstWallL = false;
            }
            
            //Canvas ceiling collision
            if(whiteY > 390){
                whiteY = 390;
                whiteJumpSpeed = 0;
                midairJumpTimer = -1;
            }
            
            //Collision for deactivated black character
            drawTile(blackX-8, blackY-8, 18);
        }
        
        //Press Space to pause
        if((keys[32]===true || keys[80]===true || keys[8]===true) && doublePauseTimer===0){
            screen = "pause";
            doublePauseTimer=1;
        }
        
        //Drawing the map
        for(var y = 0; y < tileGrid[level].length; y++){
            for(var x = 0; x < tileGrid[level][y].length; x++){
                drawTile(x*25, y*25, tileGrid[level][y][x].type);
            }
        }
        
        //Controls walkedOffLedge and saveLevelData
        if(playingAs === 0){
            if(blackOnGround===false && blackJumpSpeed===0){walkedOffLedge = true;}
            if(blackOnGround===true){
                walkedOffLedge = false;
                saveLevelData();
            }
        }
        if(playingAs === 1){
            if(whiteOnGround===false && whiteJumpSpeed===0){walkedOffLedge = true;}
            if(whiteOnGround===true){
                walkedOffLedge = false;
                saveLevelData();
            }
        }
        
        //Tutorial visuals
        if(level===1){
            rectMode(CORNER);
            fill(255, 255, 255);
            stroke(175, 175, 175);
            strokeWeight(3);
            rect(60, 80, 40, 40, 10);
            rect(150, 80, 40, 40, 10);
            rect(105, 80, 40, 40, 10);
            rect(105, 35, 40, 40, 10);
            fill(175, 175, 175);
            textAlign(CENTER, CENTER);
            textSize(25);
            noStroke();
            text("<", 75, 100);
            rect(71, 99, 20, 3);
            text(">", 175, 100);
            rect(159, 99, 20, 3);
            text("v", 125, 105);
            rect(124, 89, 2, 20);
            text("^", 125, 52);
            rect(124, 46, 2, 20);
            
            fill(255, 255, 255);
            stroke(175, 175, 175);
            strokeWeight(3);
            rect(210, 80, 40, 40, 10);
            rect(300, 80, 40, 40, 10);
            rect(255, 80, 40, 40, 10);
            rect(255, 35, 40, 40, 10);
            fill(175, 175, 175);
            textAlign(CENTER, CENTER);
            textSize(25);
            text("A", 230, 100);
            text("D", 320, 100);
            text("S", 275, 100);
            text("W", 275, 55);
        }
        if(level===4){
            if(tutorialTimer<=450){
                tutorialTimer++;
            }
            fill(255, 255, 255);
            stroke(-tutorialTimer+625, -tutorialTimer+625, -tutorialTimer+625);
            strokeWeight(3);
            rect(80, 80, 40, 40, 10);
            fill(-tutorialTimer+625, -tutorialTimer+625, -tutorialTimer+625);
            textAlign(CENTER, CENTER);
            textSize(25);
            if(controlScheme==="Arrow keys"){text("X", 100, 100);}
            else{text("K", 100, 100);}
        }
        if(level===5){
            fill(255, 255, 255);
            stroke(175, 175, 175);
            strokeWeight(3);
            rect(120, 110, 40, 40, 10);
            fill(175, 175, 175);
            textAlign(CENTER, CENTER);
            textSize(25);
            if(controlScheme==="Arrow keys"){text("C", 140, 130);}
            else{text("L", 140, 130);}
            
            textSize(18);
            text("Undo", 140, 165);
        }
        if(level===6){
            fill(0, 0, 0);
            stroke(100, 100, 100);
            strokeWeight(3);
            rect(20, 220, 80, 40, 10);
            fill(100, 100, 100);
            textAlign(CENTER, CENTER);
            textSize(25);
            text("Space", 60, 240);
            textSize(18);
            text("Pause", 60, 275);
        }
        if(level===7){
            if(tutorialTimer<=450){
                tutorialTimer++;
            }
            fill(255, 255, 255);
            stroke(-tutorialTimer+625, -tutorialTimer+625, -tutorialTimer+625);
            strokeWeight(3);
            if(tutorialTimer > 395){
                rect(210, 120, 40, 40, 10);
            }
            
            fill(-tutorialTimer+625, -tutorialTimer+625, -tutorialTimer+625);
            textAlign(CENTER, CENTER);
            textSize(25);
            if(tutorialTimer > 395){
                if(controlScheme==="Arrow keys"){text("Z", 230, 140);}
                else{text("J", 230, 140);}
                
            }
        }
        
        //Controls JumpAnim variables, which are tied to the jump animation
        if(blackOnGround===true){bJumpAnim = 0;}
        else if(bJumpAnim<5){
            if(blackJumpSpeed < 0){bJumpAnim = blackJumpSpeed*-1-2.5;}
            else{bJumpAnim = blackJumpSpeed-2.5;}
            if(playingAs===0){
                if(walkedOffLedge===true || (blackOnGround===false && blackJumpSpeed===0)){bJumpAnim = -blackJumpSpeed-1;}
            }
        }
        if(whiteOnGround===true){wJumpAnim = 0;}
        else if(wJumpAnim<5){
            if(whiteJumpSpeed < 0){wJumpAnim = whiteJumpSpeed*-1-2.5;}
            else{wJumpAnim = whiteJumpSpeed-2.5;}
            if(playingAs===1){
                if(walkedOffLedge===true || (whiteOnGround===false && whiteJumpSpeed===0)){wJumpAnim = -whiteJumpSpeed-1;}
            }
        }
        
        //Controls eyePosition
        if(keys[39]===true || keys[68] === true){eyePosition = 6;}
        else{eyePosition = 4;}
        if(keys[37]===true || keys[65] === true){eyePosition = 2;}
        
        //Drawing both characters
        if(showPlayer===true){
            if(whiteInLevel===true){drawWhite();}
            else{playingAs = 0;}
            drawBlack();
        }
    }
    
    
    //Title screen
    if(screen==="title"){
        background(255, 255, 255);
        
        //Title
        fill(0, 0, 0);
        textAlign(CENTER, CENTER);
        textSize(40);
        text("Caves of Contrast", 200, 100);
        
        //Play button
        noStroke();
        rectMode(CORNER);
        fill(0, 0, 0);
        if(mouseX > 150 && mouseX < 250 && mouseY > 275 && mouseY < 325){fill(255, 255, 255);}
        rect(150, 275, 100, 50, 15);
        fill(255, 255, 255);
        if(mouseX > 150 && mouseX < 250 && mouseY > 275 && mouseY < 325){fill(0, 0, 0);}
        textSize(20);
        text("Play", 200, 300);
        if(mouseX > 150 && mouseX < 250 && mouseY > 275 && mouseY < 325 && doubleClickTimer===0){
            if(mouseIsPressed===true){
                blackX=12;
                blackY=190;
                blackSpawnX=12;
                blackSpawnY=190;
                level = 1;
                restart();
                screen = "game";
                saveTileData(true);
            }
        }
        
        //Select Level button
        fill(0, 0, 0);
        if(mouseX > 125 && mouseX < 275 && mouseY > 340 && mouseY < 380){fill(255, 255, 255);}
        rect(125, 340, 150, 40, 15);
        fill(255, 255, 255);
        if(mouseX > 125 && mouseX < 275 && mouseY > 340 && mouseY < 380){fill(0, 0, 0);}
        textSize(20);
        text("Select Level", 200, 360);
        if(mouseX > 125 && mouseX < 275 && mouseY > 340 && mouseY < 380 && doubleClickTimer===0){
            if(mouseIsPressed===true){
                level = 0;
                screen = "level select";
                doubleClickTimer = 1;
            }
        }
    }
    
    //Level select screen
    if(screen==="level select"){
        background(255, 255, 255);
        
        //Title Screen button (totally worth making it triangular)
        noStroke();
        fill(0, 0, 0);
        if((mouseX <= 30 && mouseX >= 10 && mouseY <= 25 && mouseY >= 10 && mouseY >= -0.75*mouseX+32.5) || (mouseX <= 30 && mouseX >= 10 && mouseY <= 40 && mouseY >= 25 && mouseY <= 0.75*mouseX+17.5)){fill(255, 255, 255);}
        triangle(10, 25, 30, 10, 30, 40);
        if((mouseX <= 30 && mouseX >= 10 && mouseY <= 25 && mouseY >= 10 && mouseY >= -0.75*mouseX+32.5) || (mouseX <= 30 && mouseX >= 10 && mouseY <= 40 && mouseY >= 25 && mouseY <= 0.75*mouseX+17.5)){
            if(mouseIsPressed===true && doubleClickTimer===0){
                screen = "title";
                doubleClickTimer = 1;
            }
        }
        
        //The "Level Select" text
        fill(0, 0, 0);
        textSize(30);
        text("Levels:", 200, 50);
        
        //The level buttons
        for(var y = 0; y < tileLayouts.length/7; y++){
            for(var x = 0; x < 7; x++){
                if(y*7+x+1 < tileLayouts.length){
                    if(highScore[y*7+x] < 99 || y*7+x+1===1){
                        //y*6+x+1 is the current level that the for loop is running through
                        rectMode(CORNER);
                        fill(0, 0, 0);
                        if(mouseX > x*50+30 && mouseX < x*50+70 && mouseY > y*60+100 && mouseY < y*60+140){fill(255, 255, 255);}
                        rect(x*50+30, y*60+100, 40, 40, 12);
                        
                        fill(255, 255, 255);
                        if(mouseX > x*50+30 && mouseX < x*50+70 && mouseY > y*60+100 && mouseY < y*60+140){fill(0, 0, 0);}
                        textSize(20);
                        text(y*7+x+1, x*50+50, y*60+120);
                        
                        if(mouseX > x*50+30 && mouseX < x*50+70 && mouseY > y*60+100 && mouseY < y*60+140){
                            if(mouseIsPressed===true && doubleClickTimer===0){
                                level = y*7+x+1;
                                restart();
                                screen = "game";
                                saveTileData(true);
                            }
                        }
                        
                        //The glorious crown
                        if(highScore[y*7+x+1]===minBlockPlaces[y*7+x+1]){
                            fill(0, 0, 0);
                            triangle(x*50+35, y*60+97.5, x*50+35, y*60+85, x*50+50, y*60+97.5);
                            triangle(x*50+35, y*60+97.5, x*50+50, y*60+87.5, x*50+65, y*60+97.5);
                            triangle(x*50+65, y*60+97.5, x*50+65, y*60+85, x*50+50, y*60+97.5);
                        }
                    } else{
                        fill(255, 255, 255);
                        strokeWeight(3);
                        stroke(200, 200, 200);
                        rect(x*50+30, y*60+100, 40, 40, 12);
                    }
                }
            }
        }
    }
    
    //Pause screen
    if(screen==="pause"){
        background(255, 255, 255);
        
        fill(0, 0, 0);
        textAlign(CENTER, CENTER);
        textSize(30);
        text("Paused", 200, 50);
        
        textSize(20);
        text("Level " + level, 200, 80);
        if(level>3){
            text(blockPlaces + " blocks placed", 200, 105);
            
        }
        
        if((keys[32]===true || keys[80]===true || keys[8]===true) && doublePauseTimer===0){
            screen = "game";
            doublePauseTimer=1;
        }
        if(mouseX > 125 && mouseX < 275 && mouseY > 130 && mouseY < 165){
            if(mouseIsPressed===true && doubleClickTimer===0){
                screen = "game";
            }
        }
        fill(0, 0, 0);
        if(mouseX > 125 && mouseX < 275 && mouseY > 130 && mouseY < 165){fill(255, 255, 255);}
        noStroke();
        rectMode(CORNER);
        rect(125, 130, 150, 35, 10);
        fill(255, 255, 255);
        if(mouseX > 125 && mouseX < 275 && mouseY > 130 && mouseY < 165){fill(0, 0, 0);}
        textSize(20);
        text("Resume", 200, 147);
        
        if(mouseX > 125 && mouseX < 275 && mouseY > 175 && mouseY < 210){
            if(mouseIsPressed===true && doubleClickTimer===0){
                screen = "game";
                restart();
                tutorialTimer = 0;
                blockPlaces = 0;
                saveTileData(true);
            }
        }
        fill(0, 0, 0);
        if(mouseX > 125 && mouseX < 275 && mouseY > 175 && mouseY < 210){fill(255, 255, 255);}
        noStroke();
        rect(125, 175, 150, 35, 10);
        fill(255, 255, 255);
        if(mouseX > 125 && mouseX < 275 && mouseY > 175 && mouseY < 210){fill(0, 0, 0);}
        textSize(20);
        text("Restart", 200, 192);
        
        if(mouseX > 125 && mouseX < 275 && mouseY > 220 && mouseY < 255){
            if(mouseIsPressed===true && doubleClickTimer===0){
                screen = "level select";
                tutorialTimer = 0;
                doubleClickTimer = 1;
                blockPlaces = 0;
            }
        }
        fill(0, 0, 0);
        if(mouseX > 125 && mouseX < 275 && mouseY > 220 && mouseY < 255){fill(255, 255, 255);}
        noStroke();
        rect(125, 220, 150, 35, 10);
        fill(255, 255, 255);
        if(mouseX > 125 && mouseX < 275 && mouseY > 220 && mouseY < 255){fill(0, 0, 0);}
        textSize(20);
        text("Select Level", 200, 237);
        
        if(mouseX > 125 && mouseX < 275 && mouseY > 265 && mouseY < 300){
            if(mouseIsPressed===true && doubleClickTimer===0){
                screen = "title";
                tutorialTimer = 0;
                doubleClickTimer = 1;
                blockPlaces = 0;
            }
        }
        fill(0, 0, 0);
        if(mouseX > 125 && mouseX < 275 && mouseY > 265 && mouseY < 300){fill(255, 255, 255);}
        noStroke();
        rect(125, 265, 150, 35, 10);
        fill(255, 255, 255);
        if(mouseX > 125 && mouseX < 275 && mouseY > 265 && mouseY < 300){fill(0, 0, 0);}
        textSize(20);
        text("Title Screen", 200, 282);
    }
    
    //Win screen
    if(screen==="win"){
        background(255, 255, 255);
        fill(0, 0, 0);
        textSize(50);
        text("You Win!!!1!!", 200, 150);
        textSize(20);
        text("A surprise, to be sure, but a welcome one.", 200, 350);
        pushMatrix();
        rotate(330);
        textSize(15);
        fill(196, 196, 196);
        text("why did you invest so much time in this game", 50, 325);
        popMatrix();
    }
    
    //Goal screen
    if(screen==="goal"){
        background(255, 255, 255);
        fill(0, 0, 0);
        textAlign(CENTER, CENTER);
        textSize(40);
        text("Level "+level+" Complete!", 200, 60);
        
        blackX=blackSpawnX;
        blackY=blackSpawnY;
        whiteX=whiteSpawnX;
        whiteY=whiteSpawnY;
        
        if(level >=4){
            textSize(20);
            text("Blocks Placed: " + blockPlaces, 200, 100);
            text("Highscore: " + highScore[level], 200, 125);
        }
        if(highScore[level]<=minBlockPlaces[level]){
                triangle(180, 172.5, 180, 157.5, 200, 172.5);
                triangle(185, 172.5, 200, 160, 215, 172.5);
                triangle(220, 172.5, 220, 157.5, 200, 172.5);
            }
        
        //Retry button
        if(mouseX > 125 && mouseX < 275 && mouseY > 250 && mouseY < 285){
            if(mouseIsPressed===true){
                restart();
                screen = "game";
                blockPlaces = 0;
                saveTileData(true);
            }
        }
        fill(0, 0, 0);
        if(mouseX > 125 && mouseX < 275 && mouseY > 250 && mouseY < 285){fill(255, 255, 255);}
        noStroke();
        rectMode(CORNER);
        rect(125, 250, 150, 35, 10);
        fill(255, 255, 255);
        if(mouseX > 125 && mouseX < 275 && mouseY > 250 && mouseY < 285){fill(0, 0, 0);}
        textSize(20);
        text("Retry", 200, 267);
        
        //Next Level/Continue button
        if(mouseX > 125 && mouseX < 275 && mouseY > 200 && mouseY < 235){
            if(mouseIsPressed===true){
                if(level < 29){
                    level++;
                    screen = "game";
                }else{
                    screen = "win";
                }
                restart();
                blockPlaces = 0;
            }
        }
        fill(0, 0, 0);
        if(mouseX > 125 && mouseX < 275 && mouseY > 200 && mouseY < 235){fill(255, 255, 255);}
        noStroke();
        rectMode(CORNER);
        rect(125, 200, 150, 35, 10);
        fill(255, 255, 255);
        if(mouseX > 125 && mouseX < 275 && mouseY > 200 && mouseY < 235){fill(0, 0, 0);}
        textSize(20);
        if(level < 29){
            text("Next Level", 200, 217);
        }else{
            text("Continue", 200, 217);
        }
        
        //Also use Enter to move to the next level
        if(keys[10]===true || keys[32]===true){
            if(level < 29){
                level++;
                screen = "game";
            }else{
                screen = "win";
            }
            restart();
            blockPlaces = 0;
            doublePauseTimer=1;
        }
        
        //Select Level button
        if(mouseX > 125 && mouseX < 275 && mouseY > 300 && mouseY < 335){
            if(mouseIsPressed===true){
                screen = "level select";
                doubleClickTimer=1;
                blockPlaces = 0;
            }
        }
        fill(0, 0, 0);
        if(mouseX > 125 && mouseX < 275 && mouseY > 300 && mouseY < 335){fill(255, 255, 255);}
        noStroke();
        rectMode(CORNER);
        rect(125, 300, 150, 35, 10);
        fill(255, 255, 255);
        if(mouseX > 125 && mouseX < 275 && mouseY > 300 && mouseY < 335){fill(0, 0, 0);}
        textSize(20);
        text("Select Level", 200, 317);
        
        //Title Screen button
        if(mouseX > 125 && mouseX < 275 && mouseY > 350 && mouseY < 385){
            if(mouseIsPressed===true){
                screen = "title";
                doubleClickTimer=1;
                blockPlaces = 0;
            }
        }
        fill(0, 0, 0);
        if(mouseX > 125 && mouseX < 275 && mouseY > 350 && mouseY < 385){fill(255, 255, 255);}
        noStroke();
        rectMode(CORNER);
        rect(125, 350, 150, 35, 10);
        fill(255, 255, 255);
        if(mouseX > 125 && mouseX < 275 && mouseY > 350 && mouseY < 385){fill(0, 0, 0);}
        textSize(20);
        text("Title Screen", 200, 367);
    }
    
    
    
    //Debug stuff
    if(playerHitbox===true && screen==="game"){
        fill(255, 0, 0);
        stroke(0, 0, 255);
        if(playingAs===1){stroke(255, 0, 0);}
        strokeWeight(1);
        
        //The hitbox of the player
        line(blackX-10, blackY-5, blackX-10, blackY-10);
        line(blackX-10, blackY-10, blackX-5, blackY-10);
        line(blackX+4, blackY-10, blackX+9, blackY-10);
        line(blackX+9, blackY-10, blackX+9, blackY-5);
        line(blackX+9, blackY+4, blackX+9, blackY+9);
        line(blackX+9, blackY+9, blackX+4, blackY+9);
        line(blackX-5, blackY+9, blackX-10, blackY+9);
        line(blackX-10, blackY+9, blackX-10, blackY+4);
        
        //Crosshair at the center of the hitbox
        line(blackX, blackY-3, blackX, blackY+2);
        line(blackX-3, blackY, blackX+2, blackY);
        
        //The hitbox of the player
        if(whiteInLevel===true){
            stroke(0, 0, 255);
            if(playingAs===0){stroke(255, 0, 0);}
            line(whiteX-10, whiteY-5, whiteX-10, whiteY-10);
            line(whiteX-10, whiteY-10, whiteX-5, whiteY-10);
            line(whiteX+4, whiteY-10, whiteX+9, whiteY-10);
            line(whiteX+9, whiteY-10, whiteX+9, whiteY-5);
            line(whiteX+9, whiteY+4, whiteX+9, whiteY+9);
            line(whiteX+9, whiteY+9, whiteX+4, whiteY+9);
            line(whiteX-5, whiteY+9, whiteX-10, whiteY+9);
            line(whiteX-10, whiteY+9, whiteX-10, whiteY+4);
            
            //Crosshair at the center of the hitbox
            line(whiteX, whiteY-3, whiteX, whiteY+2);
            line(whiteX-3, whiteY, whiteX+2, whiteY);
            
        }
        noStroke();
    }
    
    if(showTargetBlock === true && screen === "game"){
        //Lines around block that the player's center is on
        stroke(0, 255, 0);
        strokeWeight(2);
        if(tileGrid[level][(blackY-blackY%25)/25][(blackX-blackX%25)/25].type===2 || tileGrid[level][(blackY-blackY%25)/25][(blackX-blackX%25)/25].type===6){stroke(255, 255, 0);}
        line(blackX-blackX%25, blackY-blackY%25+5, blackX-blackX%25, blackY-blackY%25);
        line(blackX-blackX%25, blackY-blackY%25, blackX-blackX%25+5, blackY-blackY%25);
        line(blackX-blackX%25+18, blackY-blackY%25, blackX-blackX%25+23, blackY-blackY%25);
        line(blackX-blackX%25+24, blackY-blackY%25, blackX-blackX%25+24, blackY-blackY%25+5);
        line(blackX-blackX%25+24, blackY-blackY%25+18, blackX-blackX%25+24, blackY-blackY%25+23);
        line(blackX-blackX%25+23, blackY-blackY%25+24, blackX-blackX%25+18, blackY-blackY%25+24);
        line(blackX-blackX%25+5, blackY-blackY%25+24, blackX-blackX%25, blackY-blackY%25+24);
        line(blackX-blackX%25, blackY-blackY%25+23, blackX-blackX%25, blackY-blackY%25+18);
        
        if(whiteInLevel===true){
            //Lines around block that the player's center is on
            stroke(0, 255, 0);
            if(tileGrid[level][(whiteY-whiteY%25)/25][(whiteX-whiteX%25)/25].type===3 || tileGrid[level][(whiteY-whiteY%25)/25][(whiteX-whiteX%25)/25].type===7){stroke(255, 255, 0);}
            line(whiteX-whiteX%25, whiteY-whiteY%25+5, whiteX-whiteX%25, whiteY-whiteY%25);
            line(whiteX-whiteX%25, whiteY-whiteY%25, whiteX-whiteX%25+5, whiteY-whiteY%25);
            line(whiteX-whiteX%25+18, whiteY-whiteY%25, whiteX-whiteX%25+23, whiteY-whiteY%25);
            line(whiteX-whiteX%25+24, whiteY-whiteY%25, whiteX-whiteX%25+24, whiteY-whiteY%25+5);
            line(whiteX-whiteX%25+24, whiteY-whiteY%25+18, whiteX-whiteX%25+24, whiteY-whiteY%25+23);
            line(whiteX-whiteX%25+23, whiteY-whiteY%25+24, whiteX-whiteX%25+18, whiteY-whiteY%25+24);
            line(whiteX-whiteX%25+5, whiteY-whiteY%25+24, whiteX-whiteX%25,whiteY-whiteY%25+24);
            line(whiteX-whiteX%25, whiteY-whiteY%25+23, whiteX-whiteX%25, whiteY-whiteY%25+18);
        }
    }
    
    if(personalBest===1){
        for(var i = 1; i < tileLayouts.length; i++){highScore[i] = 98;}
        personalBest=2;
    }
    
    mouseClicked = function(){
        if(teleportOnClick===true){
            if(playingAs===1){
                whiteX = mouseX;
                whiteY = mouseY;
            }
            if(playingAs===0){
                blackX = mouseX;
                blackY = mouseY;
            }
        }
    };
};
